// vite.config.js
import { resolve } from "path";
import { defineConfig } from "file:///Users/levkuzan/dev/solutions-contrib/commons/_shared/bs-lib-components/ui/node_modules/vite/dist/node/index.js";
import vue from "file:///Users/levkuzan/dev/solutions-contrib/commons/_shared/bs-lib-components/ui/node_modules/@vitejs/plugin-vue/dist/index.mjs";

// ../package.json
var version = "1.3.8";

// vite.config.js
import dts from "file:///Users/levkuzan/dev/solutions-contrib/commons/_shared/bs-lib-components/ui/node_modules/vite-plugin-dts/dist/index.mjs";
console.log(`version : ${version}`);
console.log(typeof version);
var format = process.env.format;
var indexPath = format === "es" ? "../src/index.esm.js" : format === "cjs" ? "../src/index.common.js" : "../src/index.umd.js";
var rollupOutput = {
  globals: { vue: "Vue", quasar: "Quasar", lodash: "_", axios: "axios" }
};
var plugins = [vue()];
if (format === "es") {
  plugins.push(
    dts({
      root: "../src",
      outputDir: "../dist/types"
    })
  );
}
if (format === "umd") {
  Object.assign(rollupOutput, {
    name: "QuasarBs"
  });
}
var vite_config_default = defineConfig({
  define: {
    __UI_VERSION__: JSON.stringify(version)
  },
  build: {
    target: "es6",
    emptyOutDir: false,
    outDir: "../dist",
    lib: {
      entry: resolve(indexPath),
      name: "quasar-ui-bs",
      fileName: (format2) => `quasar-ui-bs.${format2}.js`,
      formats: [format]
    },
    rollupOptions: {
      input: resolve(indexPath),
      external: ["vue", "quasar", "lodash", "axios", "@quasar/extras/mdi-v6"],
      output: rollupOutput
    }
  },
  plugins
});
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsidml0ZS5jb25maWcuanMiLCAiLi4vcGFja2FnZS5qc29uIl0sCiAgInNvdXJjZXNDb250ZW50IjogWyJjb25zdCBfX3ZpdGVfaW5qZWN0ZWRfb3JpZ2luYWxfZGlybmFtZSA9IFwiL1VzZXJzL2xldmt1emFuL2Rldi9zb2x1dGlvbnMtY29udHJpYi9jb21tb25zL19zaGFyZWQvYnMtbGliLWNvbXBvbmVudHMvdWkvYnVpbGRcIjtjb25zdCBfX3ZpdGVfaW5qZWN0ZWRfb3JpZ2luYWxfZmlsZW5hbWUgPSBcIi9Vc2Vycy9sZXZrdXphbi9kZXYvc29sdXRpb25zLWNvbnRyaWIvY29tbW9ucy9fc2hhcmVkL2JzLWxpYi1jb21wb25lbnRzL3VpL2J1aWxkL3ZpdGUuY29uZmlnLmpzXCI7Y29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2ltcG9ydF9tZXRhX3VybCA9IFwiZmlsZTovLy9Vc2Vycy9sZXZrdXphbi9kZXYvc29sdXRpb25zLWNvbnRyaWIvY29tbW9ucy9fc2hhcmVkL2JzLWxpYi1jb21wb25lbnRzL3VpL2J1aWxkL3ZpdGUuY29uZmlnLmpzXCI7aW1wb3J0IHsgcmVzb2x2ZSB9IGZyb20gXCJwYXRoXCI7XG5pbXBvcnQgeyBkZWZpbmVDb25maWcgfSBmcm9tIFwidml0ZVwiO1xuaW1wb3J0IHZ1ZSBmcm9tIFwiQHZpdGVqcy9wbHVnaW4tdnVlXCI7XG5pbXBvcnQgeyB2ZXJzaW9uIH0gZnJvbSBcIi4uL3BhY2thZ2UuanNvblwiO1xuaW1wb3J0IGR0cyBmcm9tIFwidml0ZS1wbHVnaW4tZHRzXCI7XG5cbmNvbnNvbGUubG9nKGB2ZXJzaW9uIDogJHt2ZXJzaW9ufWApO1xuY29uc29sZS5sb2codHlwZW9mIHZlcnNpb24pO1xuXG5sZXQgZm9ybWF0ID0gcHJvY2Vzcy5lbnYuZm9ybWF0O1xuXG5sZXQgaW5kZXhQYXRoID1cbiAgZm9ybWF0ID09PSBcImVzXCJcbiAgICA/IFwiLi4vc3JjL2luZGV4LmVzbS5qc1wiXG4gICAgOiBmb3JtYXQgPT09IFwiY2pzXCJcbiAgICA/IFwiLi4vc3JjL2luZGV4LmNvbW1vbi5qc1wiXG4gICAgOiBcIi4uL3NyYy9pbmRleC51bWQuanNcIjtcblxubGV0IHJvbGx1cE91dHB1dCA9IHtcbiAgZ2xvYmFsczogeyB2dWU6IFwiVnVlXCIsIHF1YXNhcjogXCJRdWFzYXJcIiwgbG9kYXNoOiBcIl9cIiwgYXhpb3M6IFwiYXhpb3NcIiB9LFxufTtcblxuY29uc3QgcGx1Z2lucyA9IFt2dWUoKV07XG5cbmlmIChmb3JtYXQgPT09IFwiZXNcIikge1xuICBwbHVnaW5zLnB1c2goXG4gICAgZHRzKHtcbiAgICAgIHJvb3Q6IFwiLi4vc3JjXCIsXG4gICAgICBvdXRwdXREaXI6IFwiLi4vZGlzdC90eXBlc1wiLFxuICAgIH0pXG4gICk7XG59XG5cbmlmIChmb3JtYXQgPT09IFwidW1kXCIpIHtcbiAgT2JqZWN0LmFzc2lnbihyb2xsdXBPdXRwdXQsIHtcbiAgICBuYW1lOiBcIlF1YXNhckJzXCIsXG4gIH0pO1xufVxuXG5leHBvcnQgZGVmYXVsdCBkZWZpbmVDb25maWcoe1xuICBkZWZpbmU6IHtcbiAgICBfX1VJX1ZFUlNJT05fXzogSlNPTi5zdHJpbmdpZnkodmVyc2lvbiksXG4gIH0sXG4gIGJ1aWxkOiB7XG4gICAgdGFyZ2V0OiBcImVzNlwiLFxuICAgIGVtcHR5T3V0RGlyOiBmYWxzZSxcbiAgICBvdXREaXI6IFwiLi4vZGlzdFwiLFxuICAgIGxpYjoge1xuICAgICAgZW50cnk6IHJlc29sdmUoaW5kZXhQYXRoKSxcbiAgICAgIG5hbWU6IFwicXVhc2FyLXVpLWJzXCIsXG4gICAgICBmaWxlTmFtZTogKGZvcm1hdCkgPT4gYHF1YXNhci11aS1icy4ke2Zvcm1hdH0uanNgLFxuICAgICAgZm9ybWF0czogW2Zvcm1hdF0sXG4gICAgfSxcbiAgICByb2xsdXBPcHRpb25zOiB7XG4gICAgICBpbnB1dDogcmVzb2x2ZShpbmRleFBhdGgpLFxuICAgICAgZXh0ZXJuYWw6IFtcInZ1ZVwiLCBcInF1YXNhclwiLCBcImxvZGFzaFwiLCBcImF4aW9zXCIsIFwiQHF1YXNhci9leHRyYXMvbWRpLXY2XCJdLFxuICAgICAgb3V0cHV0OiByb2xsdXBPdXRwdXQsXG4gICAgfSxcbiAgfSxcbiAgcGx1Z2luczogcGx1Z2lucyxcbn0pO1xuIiwgIntcbiAgXCJuYW1lXCI6IFwicXVhc2FyLXVpLWJzXCIsXG4gIFwidmVyc2lvblwiOiBcIjEuMy44XCIsXG4gIFwidHlwZVwiOiBcIm1vZHVsZVwiLFxuICBcImF1dGhvclwiOiBcImFuYXMgbGFhcm91c3NpIDxhbmFzLmxhYXJvdXNzaUBkYXRhaWt1LmNvbT5cIixcbiAgXCJkZXNjcmlwdGlvblwiOiBcIlNoYXJlZCBDb21wb25lbnRzIGxpYnJhcnkgZm9yIGJ1c2luZXNzIHNvbHV0aW9ucyB3ZWJhcHBzIGJhc2VkIG9uIHZ1ZSAmIHF1YXNhclwiLFxuICBcImxpY2Vuc2VcIjogXCJNSVRcIixcbiAgXCJtb2R1bGVcIjogXCJkaXN0L3F1YXNhci11aS1icy5lcy5qc1wiLFxuICBcIm1haW5cIjogXCJkaXN0L3F1YXNhci11aS1icy5janMuanNcIixcbiAgXCJmaWxlc1wiOiBbXG4gICAgXCJkaXN0LypcIlxuICBdLFxuICBcInR5cGVzXCI6IFwiZGlzdC90eXBlcy9pbmRleC5lc20uZC50c1wiLFxuICBcInNjcmlwdHNcIjoge1xuICAgIFwiZGV2XCI6IFwiY2QgZGV2ICYmIHlhcm4gZGV2ICYmIGNkIC4uXCIsXG4gICAgXCJkZXY6dW1kXCI6IFwibm9kZSBidWlsZC9zY3JpcHQub3Blbi11bWQuanNcIixcbiAgICBcImJ1aWxkXCI6IFwiY2QgYnVpbGQgJiYgc2ggYnVpbGQuc2ggJiYgY2QgLi5cIixcbiAgICBcImJ1aWxkOmRvY3NcIjogXCJOT0RFX0VOVj1wcm9kdWN0aW9uICYmIGNkIGRldiAmJiBxdWFzYXIgYnVpbGQgJiYgY2QgLi5cIixcbiAgICBcInJlbGVhc2VcIjogXCJub2RlIGJ1aWxkL3JlbGVhc2UuanNcIlxuICB9LFxuICBcInJlcG9zaXRvcnlcIjoge1xuICAgIFwidHlwZVwiOiBcImdpdFwiLFxuICAgIFwidXJsXCI6IFwiXCJcbiAgfSxcbiAgXCJidWdzXCI6IFwiXCIsXG4gIFwiaG9tZXBhZ2VcIjogXCJcIixcbiAgXCJkZXZEZXBlbmRlbmNpZXNcIjoge1xuICAgIFwiQHF1YXNhci9hcHAtd2VicGFja1wiOiBcIl4zLjAuMFwiLFxuICAgIFwiQHF1YXNhci9leHRyYXNcIjogXCJeMS4wLjBcIixcbiAgICBcIkByb2xsdXAvcGx1Z2luLWJ1YmxlXCI6IFwiXjAuMjEuM1wiLFxuICAgIFwiQHJvbGx1cC9wbHVnaW4taW1hZ2VcIjogXCJeMy4wLjBcIixcbiAgICBcIkByb2xsdXAvcGx1Z2luLWpzb25cIjogXCJeNC4wLjBcIixcbiAgICBcIkByb2xsdXAvcGx1Z2luLW5vZGUtcmVzb2x2ZVwiOiBcIl4xMS4yLjFcIixcbiAgICBcIkByb2xsdXAvcGx1Z2luLXJlcGxhY2VcIjogXCJeMi40LjJcIixcbiAgICBcIkB0eXBlcy9sb2Rhc2hcIjogXCJeNC4xNC4xOTFcIixcbiAgICBcIkByb2xsdXAvcGx1Z2luLXR5cGVzY3JpcHRcIjogXCJeMTEuMC4wXCIsXG4gICAgXCJAdHlwZXMvbm9kZVwiOiBcIl4xOC4xNC4yXCIsXG4gICAgXCJAdml0ZWpzL3BsdWdpbi12dWVcIjogXCJeNC4wLjBcIixcbiAgICBcImF1dG9wcmVmaXhlclwiOiBcIl4xMC4wLjJcIixcbiAgICBcImNvcmUtanNcIjogXCJeMy4wLjBcIixcbiAgICBcImNzc25hbm9cIjogXCJeNC4xLjEwXCIsXG4gICAgXCJkb3RlbnZcIjogXCJeMTYuMC4zXCIsXG4gICAgXCJlbnF1aXJlclwiOiBcIl4yLjMuNlwiLFxuICAgIFwiZnMtZXh0cmFcIjogXCJeOC4xLjBcIixcbiAgICBcImdsb2JcIjogXCJeOS4xLjBcIixcbiAgICBcImh0dHBzXCI6IFwiXjEuMC4wXCIsXG4gICAgXCJvcGVuXCI6IFwiXjcuMy4wXCIsXG4gICAgXCJwb3N0Y3NzXCI6IFwiXjguMS45XCIsXG4gICAgXCJwcmlzbWpzXCI6IFwiXjEuMjkuMFwiLFxuICAgIFwiYXhpb3NcIjogXCJeMS4zLjJcIixcbiAgICBcImxvZGFzaFwiOiBcIl40LjE3LjIxXCIsXG4gICAgXCJxdWFzYXJcIjogXCJeMi4wLjBcIixcbiAgICBcInJpbXJhZlwiOiBcIl4zLjAuMFwiLFxuICAgIFwicm9sbHVwXCI6IFwiXjIuNDUuMFwiLFxuICAgIFwicm9sbHVwLXBsdWdpbi12dWVcIjogXCJeNi4wLjBcIixcbiAgICBcInJ0bGNzc1wiOiBcIl4yLjYuMVwiLFxuICAgIFwic2Fzc1wiOiBcIjEuMzIuMFwiLFxuICAgIFwidHNsaWJcIjogXCJeMi41LjBcIixcbiAgICBcInR5cGVzY3JpcHRcIjogXCJeNC45LjVcIixcbiAgICBcInVnbGlmeS1qc1wiOiBcIl4zLjEzLjNcIixcbiAgICBcInZpdGVcIjogXCJeNC4xLjRcIixcbiAgICBcInZpdGUtcGx1Z2luLWR0c1wiOiBcIl4yLjAuMlwiLFxuICAgIFwidnVlXCI6IFwiXjMuMC4wXCIsXG4gICAgXCJ2dWUtcm91dGVyXCI6IFwiXjQuMC4wXCIsXG4gICAgXCJ2dWUtdGVtcGxhdGUtY29tcGlsZXJcIjogXCJeMi43LjEzXCIsXG4gICAgXCJ2dWUtdHNjXCI6IFwiXjEuMi4wXCIsXG4gICAgXCJ6bGliXCI6IFwiXjEuMC41XCJcbiAgfSxcbiAgXCJwZWVyRGVwZW5kZW5jaWVzXCI6IHtcbiAgICBcIkBxdWFzYXIvZXh0cmFzXCI6IFwiXjEuMC4wXCIsXG4gICAgXCJxdWFzYXJcIjogXCJeMi4wLjBcIixcbiAgICBcInZ1ZVwiOiBcIl4zLjAuMFwiLFxuICAgIFwiYXhpb3NcIjogXCJeMS4zLjJcIixcbiAgICBcImxvZGFzaFwiOiBcIl40LjE3LjIxXCJcbiAgfSxcbiAgXCJicm93c2Vyc2xpc3RcIjogW1xuICAgIFwibGFzdCA0IENocm9tZSB2ZXJzaW9uc1wiLFxuICAgIFwibGFzdCA0IEZpcmVmb3ggdmVyc2lvbnNcIixcbiAgICBcImxhc3QgMiBFZGdlIHZlcnNpb25zXCIsXG4gICAgXCJsYXN0IDQgU2FmYXJpIHZlcnNpb25zXCIsXG4gICAgXCJsYXN0IDQgQW5kcm9pZCB2ZXJzaW9uc1wiLFxuICAgIFwibGFzdCA0IENocm9tZUFuZHJvaWQgdmVyc2lvbnNcIixcbiAgICBcImxhc3QgNCBGaXJlZm94QW5kcm9pZCB2ZXJzaW9uc1wiLFxuICAgIFwibGFzdCA0IGlPUyB2ZXJzaW9uc1wiXG4gIF1cbn1cbiJdLAogICJtYXBwaW5ncyI6ICI7QUFBa2EsU0FBUyxlQUFlO0FBQzFiLFNBQVMsb0JBQW9CO0FBQzdCLE9BQU8sU0FBUzs7O0FDQWQsY0FBVzs7O0FERWIsT0FBTyxTQUFTO0FBRWhCLFFBQVEsSUFBSSxhQUFhLFNBQVM7QUFDbEMsUUFBUSxJQUFJLE9BQU8sT0FBTztBQUUxQixJQUFJLFNBQVMsUUFBUSxJQUFJO0FBRXpCLElBQUksWUFDRixXQUFXLE9BQ1Asd0JBQ0EsV0FBVyxRQUNYLDJCQUNBO0FBRU4sSUFBSSxlQUFlO0FBQUEsRUFDakIsU0FBUyxFQUFFLEtBQUssT0FBTyxRQUFRLFVBQVUsUUFBUSxLQUFLLE9BQU8sUUFBUTtBQUN2RTtBQUVBLElBQU0sVUFBVSxDQUFDLElBQUksQ0FBQztBQUV0QixJQUFJLFdBQVcsTUFBTTtBQUNuQixVQUFRO0FBQUEsSUFDTixJQUFJO0FBQUEsTUFDRixNQUFNO0FBQUEsTUFDTixXQUFXO0FBQUEsSUFDYixDQUFDO0FBQUEsRUFDSDtBQUNGO0FBRUEsSUFBSSxXQUFXLE9BQU87QUFDcEIsU0FBTyxPQUFPLGNBQWM7QUFBQSxJQUMxQixNQUFNO0FBQUEsRUFDUixDQUFDO0FBQ0g7QUFFQSxJQUFPLHNCQUFRLGFBQWE7QUFBQSxFQUMxQixRQUFRO0FBQUEsSUFDTixnQkFBZ0IsS0FBSyxVQUFVLE9BQU87QUFBQSxFQUN4QztBQUFBLEVBQ0EsT0FBTztBQUFBLElBQ0wsUUFBUTtBQUFBLElBQ1IsYUFBYTtBQUFBLElBQ2IsUUFBUTtBQUFBLElBQ1IsS0FBSztBQUFBLE1BQ0gsT0FBTyxRQUFRLFNBQVM7QUFBQSxNQUN4QixNQUFNO0FBQUEsTUFDTixVQUFVLENBQUNBLFlBQVcsZ0JBQWdCQTtBQUFBLE1BQ3RDLFNBQVMsQ0FBQyxNQUFNO0FBQUEsSUFDbEI7QUFBQSxJQUNBLGVBQWU7QUFBQSxNQUNiLE9BQU8sUUFBUSxTQUFTO0FBQUEsTUFDeEIsVUFBVSxDQUFDLE9BQU8sVUFBVSxVQUFVLFNBQVMsdUJBQXVCO0FBQUEsTUFDdEUsUUFBUTtBQUFBLElBQ1Y7QUFBQSxFQUNGO0FBQUEsRUFDQTtBQUNGLENBQUM7IiwKICAibmFtZXMiOiBbImZvcm1hdCJdCn0K
